#define _CRT_SECURE_NO_WARNINGS
#define pb push_back

#include <iostream>
#include <climits>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <vector>
#include <map>
#include <string>
#include <stack>
#include <set>
#include <cstdio>
#include <cctype>
#include <queue>
#include <bitset>
#include <functional>
#include <cassert>
#include <unordered_map>

using namespace std;

#define int long long

typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef long double ld;
typedef double db;

const ll N = 1e5 + 20;
const ll INF = LONG_MAX;


const ld eps = 1e-15;
const ld base = 0.0;


struct point {
	ld x, y;
	point(ld x = base, ld y = base) {
		this->x = x;
		this->y = y;
	}
};

const point pt_base = { 0.0, 0.0 };

point operator+(point a, point b) {
	return { a.x + b.x, a.y + b.y };
}
point operator-(point a, point b) {
	return { a.x - b.x, a.y - b.y };
}
ld operator*(point a, point b) {
	return a.x * b.y - a.y * b.x;
}
ld operator^(point a, point b) {
	return a.x * b.x + a.y * b.y;
}

ld len(point a) {
	return sqrt(a.x * a.x + a.y * a.y);
}
ld pt_dist(point a, point b) {
	return len(a - b);
}

struct seg {
	point start, end;
	ld l;
	seg(point start = pt_base, point end = pt_base) {
		this->end = end;
		this->start = start;
	}
};
bool is_equal(ld a, ld b) {
	return fabs(a - b) < eps;
}
bool operator==(point a, point b) {
	return is_equal(a.x, b.x) && is_equal(a.y, b.y);
}
bool cmp_more(ld a, ld b) { // a > b
	return a - b > eps;
}
bool cmp_less(ld a, ld b) { // a < b
	return b - a > eps;
}

bool is_in_seg(point a, seg b) {
	if (a == b.start || a == b.end) return true;
	return is_equal((a - b.start) * (b.end - b.start), 0.0) && cmp_less((b.end - a) ^ (b.start - a), 0.0);
}
bool is_in_luch(point a, seg b) {
	if (a == b.start) return true;
	return is_equal((a - b.start) * (b.end - b.start), 0.0) && cmp_more(((b.end - b.start) ^ (a - b.start)), 0.0);
}

bool cw(point a, point b) {
	return cmp_less(a * b, 0.0);
}
bool ccw(point a, point b) {
	return cmp_more(a * b, 0.0);
}

struct line {
	ld a, b, c;
	line(ld a = base, ld b = base, ld c = base) {
		this->a = a;
		this->b = b;
		this->c = c;
	}
};

ld pt_to_line_dist(point p, line l) {
	return (l.a * p.x + l.b * p.y + l.c) / (sqrt(l.a * l.a + l.b * l.b));
}
point pt_to_line_projection(point p, line l) {
	ld d = pt_to_line_dist(p, l);
	point n = { l.a, l.b };
	n.x *= d;
	n.y *= d;
	n.x /= sqrt(l.a * l.a + l.b * l.b);
	n.y /= sqrt(l.a * l.a + l.b * l.b);
	return (p - n);
}

signed main() {
#ifndef ONLINE_JUDGE
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#else
#endif
	ios_base::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);

	
	return 0;
}
